import svpy
from svpy import *
svpy.writefile = open("../lab6_2_provided/design_source/collision_detector.sv", 'w')
import svmath
import utils
from svmath import *
from structs import JOBB, Contact
svwrite("\n")
dump_queue()
obb1 = JOBB("obb1")
obb2 = JOBB("obb2")
normal = Vec2(2, 14, "normal")
svwrite("\n")
dump_queue()
svwrite("module collision_detector(\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(obb1.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(obb2.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    output logic is_collision,\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(Contact.declare("output"))
svpy.inline_state = False
svwrite("\n")
dump_queue()
svwrite(");\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Steps:\n")
dump_queue()
svwrite("//  1. Generate bases of A and B (maybe move this to external module later to minimize cos/sin use)\n")
dump_queue()
svwrite("//  2. Project points of B onto axes of A\n")
dump_queue()
svwrite("//      - Need to get points of rects A and B from pos, dimensions, and angle\n")
dump_queue()
svwrite("///     - Get points RELATIVE to rectangle A\n")
dump_queue()
svwrite("//      - Will refer to this coordinate system as UV coords\n")
dump_queue()
svwrite("//  3. Get minimum and maximum u and v of B\n")
dump_queue()
svwrite("//  4. Use simple comparisons to check for separating axis\n")
dump_queue()
svwrite("//  5. Repeat steps for A onto B\n")
dump_queue()
svwrite("//  6. Use big OR gate to combine all the checks\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Get points of A and B\n")
dump_queue()
svwrite("//  - Need to rotate first, then subtract\n")
dump_queue()
points1 = [obb1.Point0, obb1.Point1, obb1.Point2, obb1.Point3]
points2 = [obb2.Point0, obb2.Point1, obb2.Point2, obb2.Point3]
svwrite("\n")
dump_queue()
svwrite("//// TEST 1: A onto B\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Project points of A onto axes of B\n")
dump_queue()
points1_u = []
points1_v = []
i = 0
for point in points1:
    relative = point - obb2.pos
    point_u = Fixed(8, 16, f"Point1_{i}_u")
    point_v = Fixed(8, 16, f"Point1_{i}_v")

    point_u.declare()
    point_v.declare()

    point_u.assign(relative.Dot(obb2.u))
    point_v.assign(relative.Dot(obb2.v))

    points1_u.append(point_u)
    points1_v.append(point_v)
    i += 1
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Find max u and v values for rect A\n")
dump_queue()
svwrite("logic signed [23:0] max_uA;\n")
dump_queue()
svwrite("logic signed [23:0] max_uA_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] max_uA_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] max_vA;\n")
dump_queue()
svwrite("logic signed [23:0] max_vA_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] max_vA_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Also record xy coordinate point corresponding to min values\n")
dump_queue()
point_max_uA = Vec2(8, 14, "point_max_uA");
point_max_uA_01 = Vec2(8, 14, "point_max_uA_01");
point_max_uA_23 = Vec2(8, 14, "point_max_uA_23");

point_max_vA = Vec2(8, 14, "point_max_vA");
point_max_vA_01 = Vec2(8, 14, "point_max_vA_01");
point_max_vA_23 = Vec2(8, 14, "point_max_vA_23");

point_max_uA.declare()
point_max_uA_01.declare()
point_max_uA_23.declare()

point_max_vA.declare()
point_max_vA_01.declare()
point_max_vA_23.declare()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// max u\n")
dump_queue()
svwrite("max_uA_01 = ")
svpy.inline_state = True
svwrite(points1_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uA_01.assign(points1[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_u[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points1_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uA_01 = ")
svpy.inline_state = True
svwrite(points1_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uA_01.assign(points1[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uA_23 = ")
svpy.inline_state = True
svwrite(points1_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uA_23.assign(points1[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_u[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points1_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uA_23 = ")
svpy.inline_state = True
svwrite(points1_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uA_23.assign(points1[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uA = max_uA_01;\n")
dump_queue()
point_max_uA.assign(point_max_uA_01)
svwrite("if (max_uA_23 > max_uA_01) begin\n")
dump_queue()
svwrite("    max_uA = max_uA_23;\n")
dump_queue()
point_max_uA.assign(point_max_uA_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// max v\n")
dump_queue()
svwrite("max_vA_01 = ")
svpy.inline_state = True
svwrite(points1_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vA_01.assign(points1[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_v[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points1_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vA_01 = ")
svpy.inline_state = True
svwrite(points1_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vA_01.assign(points1[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vA_23 = ")
svpy.inline_state = True
svwrite(points1_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vA_23.assign(points1[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_v[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points1_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vA_23 = ")
svpy.inline_state = True
svwrite(points1_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vA_23.assign(points1[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vA = max_vA_01;\n")
dump_queue()
point_max_vA.assign(point_max_vA_01)
svwrite("if (max_vA_23 > max_vA_01) begin\n")
dump_queue()
svwrite("    max_vA = max_vA_23;\n")
dump_queue()
point_max_vA.assign(point_max_vA_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("// Find min u and v values for rect A\n")
dump_queue()
svwrite("logic signed [23:0] min_uA;\n")
dump_queue()
svwrite("logic signed [23:0] min_uA_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] min_uA_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] min_vA;\n")
dump_queue()
svwrite("logic signed [23:0] min_vA_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] min_vA_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Also record xy coordinate point corresponding to min values\n")
dump_queue()
point_min_uA = Vec2(8, 14, "point_min_uA");
point_min_uA_01 = Vec2(8, 14, "point_min_uA_01");
point_min_uA_23 = Vec2(8, 14, "point_min_uA_23");

point_min_vA = Vec2(8, 14, "point_min_vA");
point_min_vA_01 = Vec2(8, 14, "point_min_vA_01");
point_min_vA_23 = Vec2(8, 14, "point_min_vA_23");

point_min_uA.declare()
point_min_uA_01.declare()
point_min_uA_23.declare()

point_min_vA.declare()
point_min_vA_01.declare()
point_min_vA_23.declare()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// Min u\n")
dump_queue()
svwrite("min_uA_01 = ")
svpy.inline_state = True
svwrite(points1_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uA_01.assign(points1[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_u[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points1_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uA_01 = ")
svpy.inline_state = True
svwrite(points1_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uA_01.assign(points1[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uA_23 = ")
svpy.inline_state = True
svwrite(points1_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uA_23.assign(points1[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_u[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points1_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uA_23 = ")
svpy.inline_state = True
svwrite(points1_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uA_23.assign(points1[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uA = min_uA_01;\n")
dump_queue()
point_min_uA.assign(point_min_uA_01)
svwrite("if (min_uA_23 < min_uA_01) begin\n")
dump_queue()
svwrite("    min_uA = min_uA_23;\n")
dump_queue()
point_min_uA.assign(point_min_uA_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Min v\n")
dump_queue()
svwrite("min_vA_01 = ")
svpy.inline_state = True
svwrite(points1_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vA_01.assign(points1[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_v[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points1_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vA_01 = ")
svpy.inline_state = True
svwrite(points1_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vA_01.assign(points1[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vA_23 = ")
svpy.inline_state = True
svwrite(points1_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vA_23.assign(points1[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points1_v[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points1_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vA_23 = ")
svpy.inline_state = True
svwrite(points1_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vA_23.assign(points1[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vA = min_vA_01;\n")
dump_queue()
point_min_vA.assign(point_min_vA_01)
svwrite("if (min_vA_23 < min_vA_01) begin\n")
dump_queue()
svwrite("    min_vA = min_vA_23;\n")
dump_queue()
point_min_vA.assign(point_min_vA_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("// Need to cast width and height of B into same Fixed structure as u and v\n")
dump_queue()
widthB_fixed = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "widthB_fixed")
heightB_fixed = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "heightB_fixed")

widthB_fixed.declare()
widthB_fixed.assign(obb2.halfWidth)
heightB_fixed.declare()
heightB_fixed.assign(obb2.halfHeight)
svwrite("\n")
dump_queue()
svwrite("// Find penetration values for each axis\n")
dump_queue()
min_uA = Fixed(8, 16, "min_uA")
max_uA = Fixed(8, 16, "max_uA")
min_vA = Fixed(8, 16, "min_vA")
max_vA = Fixed(8, 16, "max_vA")
pen_min_uA = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_min_uA")
pen_max_uA = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_max_uA")
pen_min_vA = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_min_vA")
pen_max_vA = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_max_vA")
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] pen_min_uA;\n")
dump_queue()
svwrite("logic signed [23:0] pen_max_uA;\n")
dump_queue()
svwrite("logic signed [23:0] pen_min_vA;\n")
dump_queue()
svwrite("logic signed [23:0] pen_max_vA;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("always_comb begin\n")
dump_queue()
svwrite("    pen_min_uA = widthB_fixed - min_uA;\n")
dump_queue()
svwrite("    pen_max_uA = max_uA + widthB_fixed;\n")
dump_queue()
svwrite("    pen_min_vA = heightB_fixed - min_vA;\n")
dump_queue()
svwrite("    pen_max_vA = max_vA + heightB_fixed;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("//// TEST 2: B onto A\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Project points of B onto axes of A\n")
dump_queue()
points2_u = []
points2_v = []
i = 0
for point in points2:
    relative = point - obb1.pos    
    point_u = Fixed(8, 16, f"Point2_{i}_u")
    point_v = Fixed(8, 16, f"Point2_{i}_v")

    point_u.declare()
    point_v.declare()

    point_u.assign(relative.Dot(obb1.u))
    point_v.assign(relative.Dot(obb1.v))

    points2_u.append(point_u)
    points2_v.append(point_v)

    i += 1
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Find max u and v values for rect B\n")
dump_queue()
svwrite("logic signed [23:0] max_uB;\n")
dump_queue()
svwrite("logic signed [23:0] max_uB_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] max_uB_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] max_vB;\n")
dump_queue()
svwrite("logic signed [23:0] max_vB_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] max_vB_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Also record xy coordinate point corresponding to min values\n")
dump_queue()
point_max_uB = Vec2(8, 14, "point_max_uB");
point_max_uB_01 = Vec2(8, 14, "point_max_uB_01");
point_max_uB_23 = Vec2(8, 14, "point_max_uB_23");

point_max_vB = Vec2(8, 14, "point_max_vB");
point_max_vB_01 = Vec2(8, 14, "point_max_vB_01");
point_max_vB_23 = Vec2(8, 14, "point_max_vB_23");

point_max_uB.declare()
point_max_uB_01.declare()
point_max_uB_23.declare()

point_max_vB.declare()
point_max_vB_01.declare()
point_max_vB_23.declare()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// max u\n")
dump_queue()
svwrite("max_uB_01 = ")
svpy.inline_state = True
svwrite(points2_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uB_01.assign(points2[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_u[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points2_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uB_01 = ")
svpy.inline_state = True
svwrite(points2_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uB_01.assign(points2[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uB_23 = ")
svpy.inline_state = True
svwrite(points2_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uB_23.assign(points2[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_u[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points2_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uB_23 = ")
svpy.inline_state = True
svwrite(points2_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_uB_23.assign(points2[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uB = max_uB_01;\n")
dump_queue()
point_max_uB.assign(point_max_uB_01)
svwrite("if (max_uB_23 > max_uB_01) begin\n")
dump_queue()
svwrite("    max_uB = max_uB_23;\n")
dump_queue()
point_max_uB.assign(point_max_uB_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// max v\n")
dump_queue()
svwrite("max_vB_01 = ")
svpy.inline_state = True
svwrite(points2_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vB_01.assign(points2[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_v[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points2_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vB_01 = ")
svpy.inline_state = True
svwrite(points2_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vB_01.assign(points2[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vB_23 = ")
svpy.inline_state = True
svwrite(points2_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vB_23.assign(points2[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_v[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(points2_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vB_23 = ")
svpy.inline_state = True
svwrite(points2_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_max_vB_23.assign(points2[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vB = max_vB_01;\n")
dump_queue()
point_max_vB.assign(point_max_vB_01)
svwrite("if (max_vB_23 > max_vB_01) begin\n")
dump_queue()
svwrite("    max_vB = max_vB_23;\n")
dump_queue()
point_max_vB.assign(point_max_vB_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("// Find min u and v values for rect B\n")
dump_queue()
svwrite("logic signed [23:0] min_uB;\n")
dump_queue()
svwrite("logic signed [23:0] min_uB_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] min_uB_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] min_vB;\n")
dump_queue()
svwrite("logic signed [23:0] min_vB_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [23:0] min_vB_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Also record xy coordinate point corresponding to min values\n")
dump_queue()
point_min_uB = Vec2(8, 14, "point_min_uB");
point_min_uB_01 = Vec2(8, 14, "point_min_uB_01");
point_min_uB_23 = Vec2(8, 14, "point_min_uB_23");

point_min_vB = Vec2(8, 14, "point_min_vB");
point_min_vB_01 = Vec2(8, 14, "point_min_vB_01");
point_min_vB_23 = Vec2(8, 14, "point_min_vB_23");

point_min_uB.declare()
point_min_uB_01.declare()
point_min_uB_23.declare()

point_min_vB.declare()
point_min_vB_01.declare()
point_min_vB_23.declare()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// Min u\n")
dump_queue()
svwrite("min_uB_01 = ")
svpy.inline_state = True
svwrite(points2_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uB_01.assign(points2[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_u[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points2_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uB_01 = ")
svpy.inline_state = True
svwrite(points2_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uB_01.assign(points2[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uB_23 = ")
svpy.inline_state = True
svwrite(points2_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uB_23.assign(points2[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_u[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points2_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uB_23 = ")
svpy.inline_state = True
svwrite(points2_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_uB_23.assign(points2[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uB = min_uB_01;\n")
dump_queue()
point_min_uB.assign(point_min_uB_01)
svwrite("if (min_uB_23 < min_uB_01) begin\n")
dump_queue()
svwrite("    min_uB = min_uB_23;\n")
dump_queue()
point_min_uB.assign(point_min_uB_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Min v\n")
dump_queue()
svwrite("min_vB_01 = ")
svpy.inline_state = True
svwrite(points2_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vB_01.assign(points2[0])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_v[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points2_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vB_01 = ")
svpy.inline_state = True
svwrite(points2_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vB_01.assign(points2[1])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vB_23 = ")
svpy.inline_state = True
svwrite(points2_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vB_23.assign(points2[2])
svwrite("if (")
svpy.inline_state = True
svwrite(points2_v[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(points2_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vB_23 = ")
svpy.inline_state = True
svwrite(points2_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
point_min_vB_23.assign(points2[3])
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vB = min_vB_01;\n")
dump_queue()
point_min_vB.assign(point_min_vB_01)
svwrite("if (min_vB_23 < min_vB_01) begin\n")
dump_queue()
svwrite("    min_vB = min_vB_23;\n")
dump_queue()
point_min_vB.assign(point_min_vB_23)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("// Need to cast width and height of A into same Fixed structure as u and v\n")
dump_queue()
widthA_fixed = Fixed(points2_u[0].integer_bits, points2_u[0].precision, "widthA_fixed")
heightA_fixed = Fixed(points2_u[0].integer_bits, points2_u[0].precision, "heightA_fixed")

widthA_fixed.declare()
widthA_fixed.assign(obb1.halfWidth)
heightA_fixed.declare()
heightA_fixed.assign(obb1.halfHeight)
svwrite("\n")
dump_queue()
svwrite("// Find penetration values for each axis\n")
dump_queue()
min_uB = Fixed(8, 16, "min_uB")
max_uB = Fixed(8, 16, "max_uB")
min_vB = Fixed(8, 16, "min_vB")
max_vB = Fixed(8, 16, "max_vB")
pen_min_uB = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_min_uB")
pen_max_uB = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_max_uB")
pen_min_vB = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_min_vB")
pen_max_vB = Fixed(points1_u[0].integer_bits, points1_u[0].precision, "pen_max_vB")
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] pen_min_uB;\n")
dump_queue()
svwrite("logic signed [23:0] pen_max_uB;\n")
dump_queue()
svwrite("logic signed [23:0] pen_min_vB;\n")
dump_queue()
svwrite("logic signed [23:0] pen_max_vB;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("always_comb begin\n")
dump_queue()
svwrite("    pen_min_uB = widthA_fixed - min_uB;\n")
dump_queue()
svwrite("    pen_max_uB = max_uB + widthA_fixed;\n")
dump_queue()
svwrite("    pen_min_vB = heightA_fixed - min_vB;\n")
dump_queue()
svwrite("    pen_max_vB = max_vB + heightA_fixed;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("////// TYING IT ALL TOGETHER\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Find minimum penetration\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Penetration value intermediaries\n")
dump_queue()
svwrite("logic signed [23:0] min_pen_uA;\n")
dump_queue()
svwrite("logic signed [23:0] min_pen_vA;\n")
dump_queue()
svwrite("logic signed [23:0] min_pen_uB;\n")
dump_queue()
svwrite("logic signed [23:0] min_pen_vB;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] min_pen_u;\n")
dump_queue()
svwrite("logic signed [23:0] min_pen_v;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [23:0] min_pen;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Normal value intermediaries and contact point intermediaries\n")
dump_queue()
normal_uA = Vec2(2, 14, "normal_uA")
normal_vA = Vec2(2, 14, "normal_vA")
normal_uB = Vec2(2, 14, "normal_uB")
normal_vB = Vec2(2, 14, "normal_vB")

normal_u = Vec2(2, 14, "normal_u")
normal_v = Vec2(2, 14, "normal_v")

normal_uA.declare()
normal_vA.declare()
normal_uB.declare()
normal_vB.declare()

normal_u.declare()
normal_v.declare()

location_uA = Vec2(8, 14, "location_uA")
location_vA = Vec2(8, 14, "location_vA")
location_uB = Vec2(8, 14, "location_uB")
location_vB = Vec2(8, 14, "location_vB")

location_u = Vec2(8, 14, "location_u")
location_v = Vec2(8, 14, "location_v")

location_uA.declare()
location_vA.declare()
location_uB.declare()
location_vB.declare()

location_u.declare()
location_v.declare()
svwrite("\n")
dump_queue()
svwrite("// Notes on confusing naming here:\n")
dump_queue()
svwrite("//  - min_pen_<> is the minimum penetration value found\n")
dump_queue()
svwrite("//  - pen_min or pen_max corresponds to the penetration value from the min or max u/v values\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// First pass\n")
dump_queue()
svwrite("min_pen_uA = pen_min_uA;\n")
dump_queue()
normal_uA.assign(-obb2.u)
location_uA.assign(point_min_uA)
svwrite("if (pen_max_uA < pen_min_uA) begin\n")
dump_queue()
svwrite("    min_pen_uA = pen_max_uA;\n")
dump_queue()
normal_uA.assign(obb2.u)
location_uA.assign(point_max_uA)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_pen_vA = pen_min_vA;\n")
dump_queue()
normal_vA.assign(-obb2.v)
location_vA.assign(point_min_vA)
svwrite("if (pen_max_vA < pen_min_vA) begin\n")
dump_queue()
svwrite("    min_pen_vA = pen_max_vA;\n")
dump_queue()
normal_vA.assign(obb2.v)
location_vA.assign(point_max_vA)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_pen_uB = pen_min_uB;\n")
dump_queue()
normal_uB.assign(-obb1.u)
location_uB.assign(point_min_uB)
svwrite("if (pen_max_uB < pen_min_uB) begin\n")
dump_queue()
svwrite("    min_pen_uB = pen_max_uB;\n")
dump_queue()
normal_uB.assign(obb1.u)
location_uB.assign(point_max_uB)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_pen_vB = pen_min_vB;\n")
dump_queue()
normal_vB.assign(-obb1.v)
location_vB.assign(point_min_vB)
svwrite("if (pen_max_vB < pen_min_vB) begin\n")
dump_queue()
svwrite("    min_pen_vB = pen_max_vB;\n")
dump_queue()
normal_v.assign(obb1.v)
location_vB.assign(point_max_vB)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Second pass\n")
dump_queue()
svwrite("min_pen_u = min_pen_uA;\n")
dump_queue()
normal_u.assign(normal_uA)
location_u.assign(location_uA)
svwrite("if (min_pen_uB < min_pen_uA) begin\n")
dump_queue()
svwrite("    min_pen_u = min_pen_uB;\n")
dump_queue()
normal_u.assign(normal_uB)
location_u.assign(location_uB)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_pen_v = min_pen_vA;\n")
dump_queue()
normal_v.assign(normal_vA)
location_v.assign(location_vA)
svwrite("if (min_pen_vB < min_pen_vA) begin\n")
dump_queue()
svwrite("    min_pen_v = min_pen_vB;\n")
dump_queue()
normal_v.assign(normal_vB)
location_v.assign(location_vB)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Final pass\n")
dump_queue()
svwrite("min_pen = min_pen_u;\n")
dump_queue()
Contact.normal.assign(normal_u)
Contact.location.assign(location_u)
svwrite("if (min_pen_v < min_pen_u) begin\n")
dump_queue()
svwrite("    min_pen = min_pen_v;\n")
dump_queue()
Contact.normal.assign(normal_v)
Contact.location.assign(location_v)
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("penetration = min_pen;\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("// If any penetration is negative, there is no collision\n")
dump_queue()
svwrite("assign is_collision = ~min_pen[23];\n")
dump_queue()
svwrite("endmodule")
dump_queue()
svpy.writefile.close()