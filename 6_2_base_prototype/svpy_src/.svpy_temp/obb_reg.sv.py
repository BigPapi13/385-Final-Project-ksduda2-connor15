import svpy
from svpy import *
svpy.writefile = open("../lab6_2_provided/design_source/obb_reg.sv", 'w')
import svmath
import utils
from svmath import *
from structs import OBB
svwrite("\n")
dump_queue()
ld = OBB("ld")
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("module obb_reg\n")
dump_queue()
svwrite("#(\n")
dump_queue()
svwrite("    parameter X_INIT = 32,\n")
dump_queue()
svwrite("    parameter Y_INIT = 32,\n")
dump_queue()
svwrite("    parameter X_VEL_INIT = 0,\n")
dump_queue()
svwrite("    parameter Y_VEL_INIT = 0,\n")
dump_queue()
svwrite("    parameter WIDTH_INIT = 10,\n")
dump_queue()
svwrite("    parameter HEIGHT_INIT = 10,\n")
dump_queue()
svwrite("    parameter ANGLE_INIT = 0,\n")
dump_queue()
svwrite("    parameter OMEGA_INIT = 0\n")
dump_queue()
svwrite(")\n")
dump_queue()
svwrite("(\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(ld.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(OBB.declare("output"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    input logic reset,\n")
dump_queue()
svwrite("    input logic load,\n")
dump_queue()
svwrite("    input logic clk\n")
dump_queue()
svwrite(");\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("parameter X_INIT_SCALED = X_INIT * 2**")
svpy.inline_state = True
svwrite((OBB.pos.precision))
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("parameter Y_INIT_SCALED = Y_INIT * 2**")
svpy.inline_state = True
svwrite((OBB.pos.precision))
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("parameter X_VEL_INIT_SCALED = X_VEL_INIT * 2**")
svpy.inline_state = True
svwrite((OBB.vel.precision))
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("parameter Y_VEL_INIT_SCALED = Y_VEL_INIT * 2**")
svpy.inline_state = True
svwrite((OBB.vel.precision))
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("parameter ANGLE_INIT_SCALED = ANGLE_INIT * 2**")
svpy.inline_state = True
svwrite(((OBB.angle.precision)))
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("parameter OMEGA_INIT_SCALED = OMEGA_INIT * 2**")
svpy.inline_state = True
svwrite(((OBB.omega.precision)))
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("\n")
dump_queue()
data_d = OBB("next")
data_d.declare()
svwrite("\n")
dump_queue()
with always_comb():
    svwritel("if (load) begin")
    data_d.assign(ld)
    svwritel("end else begin")
    data_d.assign(OBB)
    svwritel("end")
svwrite("\n")
dump_queue()
begin_ff("clk")
svwrite("    //Synchronous reset\n")
dump_queue()
svwrite("    if (reset) begin\n")
dump_queue()
svwrite("        pos_x <= X_INIT_SCALED;\n")
dump_queue()
svwrite("        pos_y <= Y_INIT_SCALED;\n")
dump_queue()
svwrite("        vel_x <= X_VEL_INIT_SCALED;\n")
dump_queue()
svwrite("        vel_y <= Y_VEL_INIT_SCALED;\n")
dump_queue()
svwrite("        width <= WIDTH_INIT;\n")
dump_queue()
svwrite("        height <= HEIGHT_INIT;\n")
dump_queue()
svwrite("        angle <= ANGLE_INIT_SCALED;\n")
dump_queue()
svwrite("        omega <= OMEGA_INIT_SCALED;\n")
dump_queue()
svwrite("    // Parallel load\n")
dump_queue()
svwrite("    end else begin\n")
dump_queue()
OBB.assign(data_d)
svwrite("    end\n")
dump_queue()
end_ff()
svwrite("\n")
dump_queue()
svwrite("endmodule")
dump_queue()
svpy.writefile.close()