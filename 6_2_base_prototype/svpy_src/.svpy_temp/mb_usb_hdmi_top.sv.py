import svpy
from svpy import *
svpy.writefile = open("../lab6_2_provided/design_source/mb_usb_hdmi_top.sv", 'w')
import svmath
import utils
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("//    mb_usb_hdmi_top.sv                                                 --\n")
dump_queue()
svwrite("//    Zuofu Cheng                                                        --\n")
dump_queue()
svwrite("//    2-29-24                                                            --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//    Spring 2024 Distribution                                           --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//    For use with ECE 385 USB + HDMI                                    --\n")
dump_queue()
svwrite("//    University of Illinois ECE Department                              --\n")
dump_queue()
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("\n")
dump_queue()
# Set to true for synthesis, false for simulation
SYNTHESIS_MODE = True
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
from svpy import *
from structs import OBB, Juice, JOBB
svwrite("\n")
dump_queue()
if SYNTHESIS_MODE == True:
    reg_clk = "vsync"
else:
    reg_clk = "Clk"
svwrite("\n")
dump_queue()
svwrite("module mb_usb_hdmi_top(\n")
dump_queue()
svwrite("    input logic Clk,\n")
dump_queue()
svwrite("    input logic reset_rtl_0,\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    //USB signals\n")
dump_queue()
svwrite("    input logic [0:0] gpio_usb_int_tri_i,\n")
dump_queue()
svwrite("    output logic gpio_usb_rst_tri_o,\n")
dump_queue()
svwrite("    input logic usb_spi_miso,\n")
dump_queue()
svwrite("    output logic usb_spi_mosi,\n")
dump_queue()
svwrite("    output logic usb_spi_sclk,\n")
dump_queue()
svwrite("    output logic usb_spi_ss,\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    //UART\n")
dump_queue()
svwrite("    input logic uart_rtl_0_rxd,\n")
dump_queue()
svwrite("    output logic uart_rtl_0_txd,\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    //HDMI\n")
dump_queue()
svwrite("    output logic hdmi_tmds_clk_n,\n")
dump_queue()
svwrite("    output logic hdmi_tmds_clk_p,\n")
dump_queue()
svwrite("    output logic [2:0]hdmi_tmds_data_n,\n")
dump_queue()
svwrite("    output logic [2:0]hdmi_tmds_data_p,\n")
dump_queue()
svwrite("        \n")
dump_queue()
svwrite("    //HEX displays\n")
dump_queue()
svwrite("    output logic [7:0] hex_segA,\n")
dump_queue()
svwrite("    output logic [3:0] hex_gridA,\n")
dump_queue()
svwrite("    output logic [7:0] hex_segB,\n")
dump_queue()
svwrite("    output logic [3:0] hex_gridB\n")
dump_queue()
svwrite(");\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    logic [31:0] keycode0_gpio, keycode1_gpio;\n")
dump_queue()
svwrite("    logic clk_25MHz, clk_125MHz, clk, clk_100MHz;\n")
dump_queue()
svwrite("    logic locked;\n")
dump_queue()
svwrite("    logic [9:0] drawX, drawY, ballxsig, ballysig, ballsizesig;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    logic hsync, vsync, vde;\n")
dump_queue()
svwrite("    logic [3:0] red, green, blue;\n")
dump_queue()
svwrite("    logic reset_ah;\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    assign reset_ah = reset_rtl_0;\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    //Keycode HEX drivers\n")
dump_queue()
svwrite("    hex_driver HexA (\n")
dump_queue()
svwrite("        .clk(Clk),\n")
dump_queue()
svwrite("        .reset(reset_ah),\n")
dump_queue()
svwrite("        .in({keycode0_gpio[31:28], keycode0_gpio[27:24], keycode0_gpio[23:20], keycode0_gpio[19:16]}),\n")
dump_queue()
svwrite("        .hex_seg(hex_segA),\n")
dump_queue()
svwrite("        .hex_grid(hex_gridA)\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    hex_driver HexB (\n")
dump_queue()
svwrite("        .clk(Clk),\n")
dump_queue()
svwrite("        .reset(reset_ah),\n")
dump_queue()
svwrite("        .in({keycode0_gpio[15:12], keycode0_gpio[11:8], keycode0_gpio[7:4], keycode0_gpio[3:0]}),\n")
dump_queue()
svwrite("        .hex_seg(hex_segB),\n")
dump_queue()
svwrite("        .hex_grid(hex_gridB)\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    mb_block mb_block_i (\n")
dump_queue()
svwrite("        .clk_100MHz(Clk),\n")
dump_queue()
svwrite("        .gpio_usb_int_tri_i(gpio_usb_int_tri_i),\n")
dump_queue()
svwrite("        .gpio_usb_keycode_0_tri_o(keycode0_gpio),\n")
dump_queue()
svwrite("        .gpio_usb_keycode_1_tri_o(keycode1_gpio),\n")
dump_queue()
svwrite("        .gpio_usb_rst_tri_o(gpio_usb_rst_tri_o),\n")
dump_queue()
svwrite("        .reset_rtl_0(~reset_ah), //Block designs expect active low reset, all other modules are active high\n")
dump_queue()
svwrite("        .uart_rtl_0_rxd(uart_rtl_0_rxd),\n")
dump_queue()
svwrite("        .uart_rtl_0_txd(uart_rtl_0_txd),\n")
dump_queue()
svwrite("        .usb_spi_miso(usb_spi_miso),\n")
dump_queue()
svwrite("        .usb_spi_mosi(usb_spi_mosi),\n")
dump_queue()
svwrite("        .usb_spi_sclk(usb_spi_sclk),\n")
dump_queue()
svwrite("        .usb_spi_ss(usb_spi_ss)\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("        \n")
dump_queue()
svwrite("    //clock wizard configured with a 1x and 5x clock for HDMI\n")
dump_queue()
svwrite("    clk_wiz_0 clk_wiz (\n")
dump_queue()
svwrite("        .clk_out1(clk_25MHz),\n")
dump_queue()
svwrite("        .clk_out2(clk_125MHz),\n")
dump_queue()
svwrite("        .reset(reset_ah),\n")
dump_queue()
svwrite("        .locked(locked),\n")
dump_queue()
svwrite("        .clk_in1(Clk)\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    //VGA Sync signal generator\n")
dump_queue()
svwrite("    vga_controller vga (\n")
dump_queue()
svwrite("        .pixel_clk(clk_25MHz),\n")
dump_queue()
svwrite("        .reset(reset_ah),\n")
dump_queue()
svwrite("        .hs(hsync),\n")
dump_queue()
svwrite("        .vs(vsync),\n")
dump_queue()
svwrite("        .active_nblank(vde),\n")
dump_queue()
svwrite("        .drawX(drawX),\n")
dump_queue()
svwrite("        .drawY(drawY)\n")
dump_queue()
svwrite("    );    \n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    //Real Digital VGA to HDMI converter\n")
dump_queue()
svwrite("    hdmi_tx_0 vga_to_hdmi (\n")
dump_queue()
svwrite("        //Clocking and Reset\n")
dump_queue()
svwrite("        .pix_clk(clk_25MHz),\n")
dump_queue()
svwrite("        .pix_clkx5(clk_125MHz),\n")
dump_queue()
svwrite("        .pix_clk_locked(locked),\n")
dump_queue()
svwrite("        //Reset is active LOW\n")
dump_queue()
svwrite("        .rst(reset_ah),\n")
dump_queue()
svwrite("        //Color and Sync Signals\n")
dump_queue()
svwrite("        .red(red),\n")
dump_queue()
svwrite("        .green(green),\n")
dump_queue()
svwrite("        .blue(blue),\n")
dump_queue()
svwrite("        .hsync(hsync),\n")
dump_queue()
svwrite("        .vsync(vsync),\n")
dump_queue()
svwrite("        .vde(vde),\n")
dump_queue()
svwrite("        \n")
dump_queue()
svwrite("        //aux Data (unused)\n")
dump_queue()
svwrite("        .aux0_din(4'b0),\n")
dump_queue()
svwrite("        .aux1_din(4'b0),\n")
dump_queue()
svwrite("        .aux2_din(4'b0),\n")
dump_queue()
svwrite("        .ade(1'b0),\n")
dump_queue()
svwrite("        \n")
dump_queue()
svwrite("        //Differential outputs\n")
dump_queue()
svwrite("        .TMDS_CLK_P(hdmi_tmds_clk_p),          \n")
dump_queue()
svwrite("        .TMDS_CLK_N(hdmi_tmds_clk_n),          \n")
dump_queue()
svwrite("        .TMDS_DATA_P(hdmi_tmds_data_p),         \n")
dump_queue()
svwrite("        .TMDS_DATA_N(hdmi_tmds_data_n)          \n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    //Ball Module\n")
dump_queue()
svwrite("    square square_instance(\n")
dump_queue()
svwrite("        .Reset(reset_ah),\n")
dump_queue()
svwrite("        .frame_clk(vsync),                    //Figure out what this should be so that the ball will move\n")
dump_queue()
svwrite("        .keycode(keycode0_gpio[7:0]),    //Notice: only one keycode connected to ball by default\n")
dump_queue()
svwrite("        .X(ballxsig),\n")
dump_queue()
svwrite("        .Y(ballysig),\n")
dump_queue()
svwrite("        .S(ballsizesig)\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    // First OBB register\n")
dump_queue()
obb1 = OBB("obb1")
obb1_ld = OBB("obb1_ld")
ld = OBB("ld")
svwrite("\n")
dump_queue()
obb1.declare()
obb1_ld.declare()
svwrite("    obb_reg #(.X_INIT(11), .Y_INIT(53), .X_VEL_INIT(-0.3), .Y_VEL_INIT(0.5), .OMEGA_INIT(0.03)) obb1(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(ld.module_assign(obb1_ld))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(OBB.module_assign(obb1))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        .load(1'b1),\n")
dump_queue()
svwrite("        .reset(reset_ah),\n")
dump_queue()
svwrite("        .clk(")
svpy.inline_state = True
svwrite(reg_clk)
svpy.inline_state = False
svwrite(")\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    // Second OBB register\n")
dump_queue()
obb2 = OBB("obb2")
obb2_ld = OBB("obb2_ld")
svwrite("\n")
dump_queue()
obb2.declare()
obb2_ld.declare()
svwrite("    obb_reg #(.X_INIT(44), .Y_INIT(13), .X_VEL_INIT(0.2), .Y_VEL_INIT(0.7), .WIDTH_INIT(15), .HEIGHT_INIT(5), .OMEGA_INIT(0.01)) obb2(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(ld.module_assign(obb2_ld))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(OBB.module_assign(obb2))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        .load(1'b1),\n")
dump_queue()
svwrite("        .reset(reset_ah),\n")
dump_queue()
svwrite("        .clk(")
svpy.inline_state = True
svwrite(reg_clk)
svpy.inline_state = False
svwrite(")\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    // Logic for determining next state\n")
dump_queue()
prev = OBB("prev")
next = OBB("next")
svwrite("    obb_updater obb1_updater(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(next.module_assign(obb1_ld))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(prev.module_assign(obb1))
svpy.inline_state = False
svwrite("\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    obb_updater obb2_updater(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(next.module_assign(obb2_ld))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(prev.module_assign(obb2))
svpy.inline_state = False
svwrite("\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    // DID SOMEONE SAY JUICE????\n")
dump_queue()
svwrite("    // ITS JUICIN' TIME\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    // Juicer for register 1\n")
dump_queue()
jobb1 = JOBB("obb1")
juice1 = Juice("obb1")
juice1.declare()
jobb1.OBB = obb1
jobb1.Juice = juice1
svwrite("\n")
dump_queue()
svwrite("    juicer juicer1(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(OBB.module_assign(obb1))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(Juice.module_assign(juice1))
svpy.inline_state = False
svwrite("\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    // Juicer for register 2\n")
dump_queue()
jobb2 = JOBB("obb2")
juice2 = Juice("obb2")
juice2.declare()
jobb2.OBB = obb2
jobb2.Juice = juice2
svwrite("\n")
dump_queue()
svwrite("    juicer juicer2(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(OBB.module_assign(obb2))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(Juice.module_assign(juice2))
svpy.inline_state = False
svwrite("\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    //Color Mapper Module   \n")
dump_queue()
svwrite("    color_mapper color_instance(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(jobb1.module_assign(jobb1))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(jobb2.module_assign(jobb2))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        .DrawX(drawX),\n")
dump_queue()
svwrite("        .DrawY(drawY),\n")
dump_queue()
svwrite("        .Red(red),\n")
dump_queue()
svwrite("        .Green(green),\n")
dump_queue()
svwrite("        .Blue(blue)\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("endmodule\n")
dump_queue()
svpy.writefile.close()