import svpy
from svpy import *
svpy.writefile = open("../lab6_2_provided/design_source/VGA_controller.sv", 'w')
import svmath
import utils
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("//      VGA controller                                                   --\n")
dump_queue()
svwrite("//      Kyle Kloepper                                                    --\n")
dump_queue()
svwrite("//      4-05-2005                                                        --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//      Modified by Stephen Kempf 04-08-2005                             --\n")
dump_queue()
svwrite("//                                10-05-2006                             --\n")
dump_queue()
svwrite("//                                03-12-2007                             --\n")
dump_queue()
svwrite("//      Translated by Joe Meng    07-07-2013                             --\n")
dump_queue()
svwrite("//      Modified by Zuofu Cheng   06-02-2023                             --\n")
dump_queue()
svwrite("//      Fall 2023 Distribution                                           --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//      Used standard 640x480 vga found at epanorama                     --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//      reference: http://www.xilinx.com/bvdocs/userguides/ug130.pdf     --\n")
dump_queue()
svwrite("//                 http://www.epanorama.net/documents/pc/vga_timing.html --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//      note: The standard is changed slightly because of 25 mhz instead --\n")
dump_queue()
svwrite("//            of 25.175 mhz pixel clock. Refresh rate drops slightly.    --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//      For use with ECE 385 along with RealDigital HDMI encoder         --\n")
dump_queue()
svwrite("//      ECE Department @ UIUC                                            --\n")
dump_queue()
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("module  vga_controller ( input        pixel_clk,        // 50 MHz clock\n")
dump_queue()
svwrite("                                      reset,            // reset signal\n")
dump_queue()
svwrite("                         output logic hs,               // Horizontal sync pulse.  Active low\n")
dump_queue()
svwrite("								      vs,               // Vertical sync pulse.  Active low\n")
dump_queue()
svwrite("									  active_nblank,    // High = active, low = blanking interval\n")
dump_queue()
svwrite("									  sync,      // Composite Sync signal.  Active low.  We don't use it in this lab,\n")
dump_queue()
svwrite("									            //   but the video DAC on the DE2 board requires an input for it.\n")
dump_queue()
svwrite("						 output [9:0] drawX,     // horizontal coordinate\n")
dump_queue()
svwrite("						              drawY );   // vertical coordinate\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    // 800 horizontal pixels indexed 0 to 799\n")
dump_queue()
svwrite("    // 525 vertical pixels indexed 0 to 524\n")
dump_queue()
svwrite("    parameter [9:0] hpixels = 10'b1100011111;\n")
dump_queue()
svwrite("    parameter [9:0] vlines = 10'b1000001100;\n")
dump_queue()
svwrite("	 \n")
dump_queue()
svwrite("	 // horizontal pixel and vertical line counters\n")
dump_queue()
svwrite("    logic [9:0] hc, vc;\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("	 // signal indicates if ok to display color for a pixel\n")
dump_queue()
svwrite("	 logic display;\n")
dump_queue()
svwrite("	 \n")
dump_queue()
svwrite("    //Disable Composite Sync\n")
dump_queue()
svwrite("    assign sync = 1'b0;\n")
dump_queue()
svwrite("     \n")
dump_queue()
svwrite("   \n")
dump_queue()
svwrite("	//Runs the horizontal counter  when it resets vertical counter is incremented\n")
dump_queue()
svwrite("   always_ff @ (posedge pixel_clk or posedge reset )\n")
dump_queue()
svwrite("	begin: counter_proc\n")
dump_queue()
svwrite("		  if ( reset ) \n")
dump_queue()
svwrite("			begin \n")
dump_queue()
svwrite("				 hc <= 10'b0000000000;\n")
dump_queue()
svwrite("				 vc <= 10'b0000000000;\n")
dump_queue()
svwrite("			end\n")
dump_queue()
svwrite("				\n")
dump_queue()
svwrite("		  else \n")
dump_queue()
svwrite("			 if ( hc == hpixels )  //If hc has reached the end of pixel count\n")
dump_queue()
svwrite("			  begin \n")
dump_queue()
svwrite("					hc <= 10'b0000000000;\n")
dump_queue()
svwrite("					if ( vc == vlines )   //if vc has reached end of line count\n")
dump_queue()
svwrite("						 vc <= 10'b0000000000;\n")
dump_queue()
svwrite("					else \n")
dump_queue()
svwrite("						 vc <= (vc + 1);\n")
dump_queue()
svwrite("			  end\n")
dump_queue()
svwrite("			 else \n")
dump_queue()
svwrite("				  hc <= (hc + 1);  //no statement about vc, implied vc <= vc;\n")
dump_queue()
svwrite("	 end \n")
dump_queue()
svwrite("   \n")
dump_queue()
svwrite("    assign drawX = hc;\n")
dump_queue()
svwrite("    assign drawY = vc;\n")
dump_queue()
svwrite("   \n")
dump_queue()
svwrite("	 //horizontal sync pulse is 96 pixels long at pixels 656-752\n")
dump_queue()
svwrite("    //(signal is registered to ensure clean output waveform)\n")
dump_queue()
svwrite("    always_ff @ (posedge reset or posedge pixel_clk )\n")
dump_queue()
svwrite("    begin : hsync_proc\n")
dump_queue()
svwrite("        if ( reset ) \n")
dump_queue()
svwrite("            hs <= 1'b0;\n")
dump_queue()
svwrite("        else  \n")
dump_queue()
svwrite("            if ((((hc + 1) >= 10'b1010010000) & ((hc + 1) < 10'b1011110000))) \n")
dump_queue()
svwrite("                hs <= 1'b0;\n")
dump_queue()
svwrite("            else \n")
dump_queue()
svwrite("				    hs <= 1'b1;\n")
dump_queue()
svwrite("    end\n")
dump_queue()
svwrite("	 \n")
dump_queue()
svwrite("    //vertical sync pulse is 2 lines(800 pixels) long at line 490-491\n")
dump_queue()
svwrite("    //(signal is registered to ensure clean output waveform)\n")
dump_queue()
svwrite("    always_ff @ (posedge reset or posedge pixel_clk )\n")
dump_queue()
svwrite("    begin : vsync_proc\n")
dump_queue()
svwrite("        if ( reset ) \n")
dump_queue()
svwrite("           vs <= 1'b0;\n")
dump_queue()
svwrite("        else \n")
dump_queue()
svwrite("            if ( ((vc + 1) == 9'b111101010) | ((vc + 1) == 9'b111101011) ) \n")
dump_queue()
svwrite("			       vs <= 1'b0;\n")
dump_queue()
svwrite("            else \n")
dump_queue()
svwrite("			       vs <= 1'b1;\n")
dump_queue()
svwrite("    end\n")
dump_queue()
svwrite("       \n")
dump_queue()
svwrite("    //only display pixels between horizontal 0-639 and vertical 0-479 (640x480)\n")
dump_queue()
svwrite("    //(This signal is registered within the DAC chip, so we can leave it as pure combinational logic here)    \n")
dump_queue()
svwrite("    always_comb\n")
dump_queue()
svwrite("    begin \n")
dump_queue()
svwrite("        if ( (hc >= 10'b1010000000) | (vc >= 10'b0111100000) ) \n")
dump_queue()
svwrite("            display = 1'b0;\n")
dump_queue()
svwrite("        else \n")
dump_queue()
svwrite("            display = 1'b1;\n")
dump_queue()
svwrite("    end \n")
dump_queue()
svwrite("   \n")
dump_queue()
svwrite("    assign active_nblank = display;    \n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("endmodule\n")
dump_queue()
svpy.writefile.close()