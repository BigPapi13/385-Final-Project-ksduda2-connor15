import svpy
from svpy import *
svpy.writefile = open("../lab6_2_provided/design_source/collision_detector_backup.sv", 'w')
import svmath
import utils
from svmath import *
svwrite("\n")
dump_queue()
widthA = Fixed(8, 0, "widthA")
heightA = Fixed(8, 0, "heightA")
posA = Vec2(7, 25, "posA")
velA = Vec2(5, 19, "velA")
uA = Vec2(2, 14, "uA")
vA = Vec2(2, 14, "vA")

widthB = Fixed(8, 0, "widthB")
heightB = Fixed(8, 0, "heightB")
posB = Vec2(7, 25, "posB")
velB = Vec2(5, 19, "velB")
uB = Vec2(2, 14, "uB")
vB = Vec2(2, 14, "vB")
svwrite("\n")
dump_queue()
svwrite("module collision_detector(\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(widthA.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(heightA.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(posA.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(velA.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(uA.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(vA.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(widthB.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(heightB.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(posB.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(velB.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(uB.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(vB.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    output logic is_collision\n")
dump_queue()
svwrite(");\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Steps:\n")
dump_queue()
svwrite("//  1. Generate bases of A and B (maybe move this to external module later to minimize cos/sin use)\n")
dump_queue()
svwrite("//  2. Project points of B onto axes of A\n")
dump_queue()
svwrite("//      - Need to get points of rects A and B from pos, dimensions, and angle\n")
dump_queue()
svwrite("///     - Get points RELATIVE to rectangle A\n")
dump_queue()
svwrite("//      - Will refer to this coordinate system as UV coords\n")
dump_queue()
svwrite("//  3. Get minimum and maximum u and v of B\n")
dump_queue()
svwrite("//  4. Use simple comparisons to check for separating axis\n")
dump_queue()
svwrite("//  5. Repeat steps for A onto B\n")
dump_queue()
svwrite("//  6. Use big OR gate to combine all the checks\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Get half width and height (this is just useful to have)\n")
dump_queue()
halfWidthA = Fixed(7, 0, "halfWidthA")
halfWidthB = Fixed(7, 0, "halfWidthB")
halfHeightA = Fixed(7, 0, "halfHeightA")
halfHeightB = Fixed(7, 0, "halfHeightB")
halfWidthA.declare()
halfWidthB.declare()
halfHeightA.declare()
halfHeightB.declare()
svwrite("\n")
dump_queue()
svwrite("assign halfWidthA = widthA >> 1;\n")
dump_queue()
svwrite("assign halfWidthB = widthB >> 1;\n")
dump_queue()
svwrite("assign halfHeightA = heightA >> 1;\n")
dump_queue()
svwrite("assign halfHeightB = heightB >> 1;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Get points of A and B\n")
dump_queue()
svwrite("//  - Need to rotate first, then subtract\n")
dump_queue()
svwrite("\n")
dump_queue()
pointsA = []
for w in (-halfWidthA, halfWidthA):
    for h in (-halfHeightA, halfHeightA):

        rotated_point = svmath.ExpressionVec2(w * uA.x + h * vA.x, w * uA.y + h * vA.y)

        pointsA.append(rotated_point + posA)

pointsB = []
for w in (-halfWidthB, halfWidthB):
    for h in (-halfHeightB, halfHeightB):
        rotated_point = svmath.ExpressionVec2(w * uB.x + h * vB.x, w * uB.y + h * vB.y)

        pointsB.append(rotated_point + posB)

svwrite("\n")
dump_queue()
svwrite("//// TEST 1: A onto B\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Project points of A onto axes of B\n")
dump_queue()
pointsA_u = []
pointsA_v = []
for point in pointsA:
    relative = point - posB    
    point_u = Fixed(7, 25)
    point_v = Fixed(7, 25)

    point_u.declare()
    point_v.declare()

    point_u.assign(relative.Dot(uB))
    point_v.assign(relative.Dot(vB))

    pointsA_u.append(point_u)
    pointsA_v.append(point_v)
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Find max u and v values for rect A\n")
dump_queue()
svwrite("logic signed [31 : 0] max_uA;\n")
dump_queue()
svwrite("logic signed [31 : 0] max_uA_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] max_uA_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [31 : 0] max_vA;\n")
dump_queue()
svwrite("logic signed [31 : 0] max_vA_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] max_vA_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// Max u\n")
dump_queue()
svwrite("max_uA_01 = ")
svpy.inline_state = True
svwrite(pointsA_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_u[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsA_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uA_01 = ")
svpy.inline_state = True
svwrite(pointsA_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uA_23 = ")
svpy.inline_state = True
svwrite(pointsA_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_u[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsA_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uA_01 = ")
svpy.inline_state = True
svwrite(pointsA_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uA = max_uA_01;\n")
dump_queue()
svwrite("if (max_uA_23 > max_uA_01) begin\n")
dump_queue()
svwrite("    max_uA = max_uA_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Max v\n")
dump_queue()
svwrite("max_vA_01 = ")
svpy.inline_state = True
svwrite(pointsA_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_v[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsA_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vA_01 = ")
svpy.inline_state = True
svwrite(pointsA_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vA_23 = ")
svpy.inline_state = True
svwrite(pointsA_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_v[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsA_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vA_01 = ")
svpy.inline_state = True
svwrite(pointsA_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vA = max_vA_01;\n")
dump_queue()
svwrite("if (max_vA_23 > max_vA_01) begin\n")
dump_queue()
svwrite("    max_vA = max_vA_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("// Find min u and v values for rect A\n")
dump_queue()
svwrite("logic signed [31 : 0] min_uA;\n")
dump_queue()
svwrite("logic signed [31 : 0] min_uA_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] min_uA_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [31 : 0] min_vA;\n")
dump_queue()
svwrite("logic signed [31 : 0] min_vA_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] min_vA_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// Min u\n")
dump_queue()
svwrite("min_uA_01 = ")
svpy.inline_state = True
svwrite(pointsA_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_u[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsA_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uA_01 = ")
svpy.inline_state = True
svwrite(pointsA_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uA_23 = ")
svpy.inline_state = True
svwrite(pointsA_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_u[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsA_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uA_01 = ")
svpy.inline_state = True
svwrite(pointsA_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uA = min_uA_01;\n")
dump_queue()
svwrite("if (min_uA_23 < min_uA_01) begin\n")
dump_queue()
svwrite("    min_uA = min_uA_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Min v\n")
dump_queue()
svwrite("min_vA_01 = ")
svpy.inline_state = True
svwrite(pointsA_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_v[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsA_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vA_01 = ")
svpy.inline_state = True
svwrite(pointsA_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vA_23 = ")
svpy.inline_state = True
svwrite(pointsA_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsA_v[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsA_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vA_01 = ")
svpy.inline_state = True
svwrite(pointsA_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vA = min_vA_01;\n")
dump_queue()
svwrite("if (min_vA_23 < min_vA_01) begin\n")
dump_queue()
svwrite("    min_vA = min_vA_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Check for separating axis\n")
dump_queue()
svwrite("logic separate_min_uA;\n")
dump_queue()
svwrite("logic separate_max_uA;\n")
dump_queue()
svwrite("logic separate_min_vA;\n")
dump_queue()
svwrite("logic separate_max_vA;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Need to cast width and height of B into same Fixed structure as u and v\n")
dump_queue()
widthB_fixed = Fixed(pointsA_u[0].integer_bits, pointsA_u[0].precision, "widthB_fixed")
heightB_fixed = Fixed(pointsA_u[0].integer_bits, pointsA_u[0].precision, "heightB_fixed")

widthB_fixed.declare()
widthB_fixed.assign(halfWidthB)
heightB_fixed.declare()
heightB_fixed.assign(halfHeightB)
svwrite("\n")
dump_queue()
begin_comb()
svwrite("separate_min_uA = 1'b0;\n")
dump_queue()
svwrite("if (min_uA >= widthB_fixed) begin\n")
dump_queue()
svwrite("    separate_min_uA = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("separate_max_uA = 1'b0;\n")
dump_queue()
svwrite("if (max_uA <= -widthB_fixed) begin\n")
dump_queue()
svwrite("    separate_max_uA = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("separate_min_vA = 1'b0;\n")
dump_queue()
svwrite("if (min_vA >= heightB_fixed) begin\n")
dump_queue()
svwrite("    separate_min_vA = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("separate_max_vA = 1'b0;\n")
dump_queue()
svwrite("if (max_vA <= -heightB_fixed) begin\n")
dump_queue()
svwrite("    separate_max_vA = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("//// TEST 2: B onto A\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Project points of B onto axes of A\n")
dump_queue()
pointsB_u = []
pointsB_v = []
for point in pointsB:
    relative = point - posA    
    point_u = Fixed(7, 25)
    point_v = Fixed(7, 25)

    point_u.declare()
    point_v.declare()

    point_u.assign(relative.Dot(uA))
    point_v.assign(relative.Dot(vA))

    pointsB_u.append(point_u)
    pointsB_v.append(point_v)
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Find max u and v values for rect B\n")
dump_queue()
svwrite("logic signed [31 : 0] max_uB;\n")
dump_queue()
svwrite("logic signed [31 : 0] max_uB_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] max_uB_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [31 : 0] max_vB;\n")
dump_queue()
svwrite("logic signed [31 : 0] max_vB_01;    // Max of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] max_vB_23;    // Max of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// Max u\n")
dump_queue()
svwrite("max_uB_01 = ")
svpy.inline_state = True
svwrite(pointsB_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_u[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsB_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uB_01 = ")
svpy.inline_state = True
svwrite(pointsB_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uB_23 = ")
svpy.inline_state = True
svwrite(pointsB_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_u[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsB_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_uB_01 = ")
svpy.inline_state = True
svwrite(pointsB_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_uB = max_uB_01;\n")
dump_queue()
svwrite("if (max_uB_23 > max_uB_01) begin\n")
dump_queue()
svwrite("    max_uB = max_uB_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Max v\n")
dump_queue()
svwrite("max_vB_01 = ")
svpy.inline_state = True
svwrite(pointsB_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_v[1])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsB_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vB_01 = ")
svpy.inline_state = True
svwrite(pointsB_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vB_23 = ")
svpy.inline_state = True
svwrite(pointsB_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_v[3])
svpy.inline_state = False
svwrite(" > ")
svpy.inline_state = True
svwrite(pointsB_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    max_vB_01 = ")
svpy.inline_state = True
svwrite(pointsB_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("max_vB = max_vB_01;\n")
dump_queue()
svwrite("if (max_vB_23 > max_vB_01) begin\n")
dump_queue()
svwrite("    max_vB = max_vB_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("// Find min u and v values for rect B\n")
dump_queue()
svwrite("logic signed [31 : 0] min_uB;\n")
dump_queue()
svwrite("logic signed [31 : 0] min_uB_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] min_uB_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("logic signed [31 : 0] min_vB;\n")
dump_queue()
svwrite("logic signed [31 : 0] min_vB_01;    // Min of points 0 and 1\n")
dump_queue()
svwrite("logic signed [31 : 0] min_vB_23;    // Min of points 2 and 3\n")
dump_queue()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("\n")
dump_queue()
svwrite("// Min u\n")
dump_queue()
svwrite("min_uB_01 = ")
svpy.inline_state = True
svwrite(pointsB_u[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_u[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsB_u[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uB_01 = ")
svpy.inline_state = True
svwrite(pointsB_u[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uB_23 = ")
svpy.inline_state = True
svwrite(pointsB_u[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_u[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsB_u[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_uB_01 = ")
svpy.inline_state = True
svwrite(pointsB_u[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_uB = min_uB_01;\n")
dump_queue()
svwrite("if (min_uB_23 < min_uB_01) begin\n")
dump_queue()
svwrite("    min_uB = min_uB_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Min v\n")
dump_queue()
svwrite("min_vB_01 = ")
svpy.inline_state = True
svwrite(pointsB_v[0])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_v[1])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsB_v[0])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vB_01 = ")
svpy.inline_state = True
svwrite(pointsB_v[1])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vB_23 = ")
svpy.inline_state = True
svwrite(pointsB_v[2])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("if (")
svpy.inline_state = True
svwrite(pointsB_v[3])
svpy.inline_state = False
svwrite(" < ")
svpy.inline_state = True
svwrite(pointsB_v[2])
svpy.inline_state = False
svwrite(") begin\n")
dump_queue()
svwrite("    min_vB_01 = ")
svpy.inline_state = True
svwrite(pointsB_v[3])
svpy.inline_state = False
svwrite(";\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("min_vB = min_vB_01;\n")
dump_queue()
svwrite("if (min_vB_23 < min_vB_01) begin\n")
dump_queue()
svwrite("    min_vB = min_vB_23;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Check for separating axis\n")
dump_queue()
svwrite("logic separate_min_uB;\n")
dump_queue()
svwrite("logic separate_max_uB;\n")
dump_queue()
svwrite("logic separate_min_vB;\n")
dump_queue()
svwrite("logic separate_max_vB;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("// Need to cast width and height of A into same Fixed structure as u and v\n")
dump_queue()
widthA_fixed = Fixed(pointsB_u[0].integer_bits, pointsB_u[0].precision, "widthA_fixed")
heightA_fixed = Fixed(pointsB_u[0].integer_bits, pointsB_u[0].precision, "heightA_fixed")

widthA_fixed.declare()
widthA_fixed.assign(halfWidthA)
heightA_fixed.declare()
heightA_fixed.assign(halfHeightA)
svwrite("\n")
dump_queue()
begin_comb()
svwrite("separate_min_uB = 1'b0;\n")
dump_queue()
svwrite("if (min_uB >= widthA_fixed) begin\n")
dump_queue()
svwrite("    separate_min_uB = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("separate_max_uB = 1'b0;\n")
dump_queue()
svwrite("if (max_uB <= -widthA_fixed) begin\n")
dump_queue()
svwrite("    separate_max_uB = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("separate_min_vB = 1'b0;\n")
dump_queue()
svwrite("if (min_vB >= heightA_fixed) begin\n")
dump_queue()
svwrite("    separate_min_vB = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("separate_max_vB = 1'b0;\n")
dump_queue()
svwrite("if (max_vB <= -heightA_fixed) begin\n")
dump_queue()
svwrite("    separate_max_vB = 1'b1;\n")
dump_queue()
svwrite("end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("////// TYING IT ALL TOGETHER\n")
dump_queue()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("is_collision = ~(separate_min_uA | separate_max_uA | separate_min_vA | separate_max_vA | separate_min_uB | separate_max_uB | separate_min_vB | separate_max_vB);\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("endmodule")
dump_queue()
svpy.writefile.close()