import svpy
from svpy import *
svpy.writefile = open("../lab6_2_provided/design_source/Color_Mapper.sv", 'w')
import svmath
import utils
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("//    Color_Mapper.sv                                                    --\n")
dump_queue()
svwrite("//    Stephen Kempf                                                      --\n")
dump_queue()
svwrite("//    3-1-06                                                             --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//    Modified by David Kesler  07-16-2008                               --\n")
dump_queue()
svwrite("//    Translated by Joe Meng    07-07-2013                               --\n")
dump_queue()
svwrite("//    Modified by Zuofu Cheng   08-19-2023                               --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//    Fall 2023 Distribution                                             --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//    For use with ECE 385 USB + HDMI                                    --\n")
dump_queue()
svwrite("//    University of Illinois ECE Department                              --\n")
dump_queue()
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("\n")
dump_queue()
from svmath import *
from structs import JOBB
svwrite("\n")
dump_queue()
DrawX = Fixed(8, 2, "DrawX")
DrawY = Fixed(8, 2, "DrawY")
svwrite("\n")
dump_queue()
obb1 = JOBB("obb1")
obb2 = JOBB("obb2")
svwrite("\n")
dump_queue()
svwrite("module  color_mapper (\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(obb1.declare("input"))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("    ")
svpy.inline_state = True
svwrite(obb2.declare("input"))
svpy.inline_state = False
svwrite(", \n")
dump_queue()
svwrite("    input  logic [9:0] DrawX, DrawY,\n")
dump_queue()
svwrite("    output logic [3:0]  Red, Green, Blue\n")
dump_queue()
svwrite(");\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("    logic obb1_on;\n")
dump_queue()
svwrite("    logic obb2_on;\n")
dump_queue()
svwrite("	 \n")
dump_queue()
svwrite("    // Rescaled versions of DrawX and DrawY\n")
dump_queue()
DrawXs = Fixed(obb1.pos.x.integer_bits, obb1.pos.x.precision, "DrawXs")
DrawYs = Fixed(obb1.pos.y.integer_bits, obb1.pos.y.precision, "DrawYs")
DrawXs.declare()
DrawYs.declare()
DrawXs.assign(DrawX)
DrawYs.assign(DrawY)
svwrite("\n")
dump_queue()
svwrite("    // Determine if point is in first square\n")
dump_queue()
DrawXRel1 = Fixed(obb1.pos.x.integer_bits, obb1.pos.x.precision, "DrawXRel1")
DrawYRel1 = Fixed(obb1.pos.y.integer_bits, obb1.pos.y.precision, "DrawYRel1")
DrawRel1 = svmath.ExpressionVec2(DrawXRel1, DrawYRel1)
DrawXRel1.declare()
DrawYRel1.declare()
DrawXRel1.assign(DrawXs - obb1.pos.x)
DrawYRel1.assign(DrawYs - obb1.pos.y)
svwrite("\n")
dump_queue()
u_projection1 = Fixed(8, 24, "u_projection1")
v_projection1 = Fixed(8, 24, "v_projection1")
u_projection1.declare()
v_projection1.declare()
halfWidth1 = resize(obb1.halfWidth, u_projection1)
halfHeight1 = resize(obb1.halfHeight, v_projection1)
svwrite("\n")
dump_queue()
begin_comb()
svwrite("        // Need to determine if DrawXs and DrawXy are in the square\n")
dump_queue()
svwrite("        // Steps:\n")
dump_queue()
svwrite("        //  - Get Pixel position relative to square position\n")
dump_queue()
svwrite("        //  - Project onto u and v axes\n")
dump_queue()
svwrite("        //  - Compare to half width and half height\n")
dump_queue()
u_projection1.assign(DrawRel1.Dot(obb1.u))
v_projection1.assign(DrawRel1.Dot(obb1.v))
svwrite("\n")
dump_queue()
svwrite("        obb1_on = 0;\n")
dump_queue()
svwrite("        if (u_projection1 > -")
svpy.inline_state = True
svwrite(halfWidth1)
svpy.inline_state = False
svwrite(" && u_projection1 < ")
svpy.inline_state = True
svwrite(halfWidth1)
svpy.inline_state = False
svwrite(" && v_projection1 > -")
svpy.inline_state = True
svwrite(halfHeight1)
svpy.inline_state = False
svwrite(" && v_projection1 < ")
svpy.inline_state = True
svwrite(halfHeight1)
svpy.inline_state = False
svwrite(" \n")
dump_queue()
svwrite("        ) begin\n")
dump_queue()
svwrite("            obb1_on = 1;\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("    // Determine if point is in second square\n")
dump_queue()
DrawXRel2 = Fixed(obb2.pos.x.integer_bits, obb2.pos.x.precision, "DrawXRel2")
DrawYRel2 = Fixed(obb2.pos.y.integer_bits, obb2.pos.y.precision, "DrawYRel2")
DrawRel2 = svmath.ExpressionVec2(DrawXRel2, DrawYRel2)
DrawXRel2.declare()
DrawYRel2.declare()
DrawXRel2.assign(DrawXs - obb2.pos.x)
DrawYRel2.assign(DrawYs - obb2.pos.y)
svwrite("\n")
dump_queue()
u_projection2 = Fixed(8, 24, "u_projection2")
v_projection2 = Fixed(8, 24, "v_projection2")
u_projection2.declare()
v_projection2.declare()
halfWidth2 = resize(obb2.halfWidth, u_projection2)
halfHeight2 = resize(obb2.halfHeight, v_projection2)
svwrite("\n")
dump_queue()
begin_comb()
svwrite("        // Need to determine if DrawXs and DrawXy are in the square\n")
dump_queue()
svwrite("        // Steps:\n")
dump_queue()
svwrite("        //  - Get Pixel position relative to square position\n")
dump_queue()
svwrite("        //  - Project onto u and v axes\n")
dump_queue()
svwrite("        //  - Compare to half width and half height\n")
dump_queue()
u_projection2.assign(DrawRel2.Dot(obb2.u))
v_projection2.assign(DrawRel2.Dot(obb2.v))
svwrite("\n")
dump_queue()
svwrite("        obb2_on = 0;\n")
dump_queue()
svwrite("        if (u_projection2 > -")
svpy.inline_state = True
svwrite(halfWidth2)
svpy.inline_state = False
svwrite(" && u_projection2 < ")
svpy.inline_state = True
svwrite(halfWidth2)
svpy.inline_state = False
svwrite(" && v_projection2 > -")
svpy.inline_state = True
svwrite(halfHeight2)
svpy.inline_state = False
svwrite(" && v_projection2 < ")
svpy.inline_state = True
svwrite(halfHeight2)
svpy.inline_state = False
svwrite(" \n")
dump_queue()
svwrite("        ) begin\n")
dump_queue()
svwrite("            obb2_on = 1;\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("    logic is_collision;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    collision_detector cm_cd_inst(\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(obb1.module_assign(obb1))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        ")
svpy.inline_state = True
svwrite(obb2.module_assign(obb2))
svpy.inline_state = False
svwrite(",\n")
dump_queue()
svwrite("        .is_collision(is_collision)\n")
dump_queue()
svwrite("    );\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    always_comb\n")
dump_queue()
svwrite("    begin:RGB_Display\n")
dump_queue()
svwrite("        if ((obb1_on == 1'b1) || (obb2_on == 1'b1)) begin\n")
dump_queue()
svwrite("            Red = 4'hf;\n")
dump_queue()
svwrite("            Green = 4'hf;\n")
dump_queue()
svwrite("            Blue = 4'hf;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("            if (is_collision) begin\n")
dump_queue()
svwrite("                Green = 4'h0;\n")
dump_queue()
svwrite("                Blue = 4'h0;\n")
dump_queue()
svwrite("            end\n")
dump_queue()
svwrite("        end       \n")
dump_queue()
svwrite("        else begin \n")
dump_queue()
svwrite("            Red = 4'h4; \n")
dump_queue()
svwrite("            Green = 4'h3;\n")
dump_queue()
svwrite("            Blue = 4'h7;\n")
dump_queue()
svwrite("        end      \n")
dump_queue()
svwrite("    end \n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("endmodule\n")
dump_queue()
svpy.writefile.close()