import svpy
from svpy import *
svpy.writefile = open("../lab6_2_provided/design_source/square.sv", 'w')
import svmath
import utils
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("//    Ball.sv                                                            --\n")
dump_queue()
svwrite("//    Viral Mehta                                                        --\n")
dump_queue()
svwrite("//    Spring 2005                                                        --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//    Modified by Stephen Kempf     03-01-2006                           --\n")
dump_queue()
svwrite("//                                  03-12-2007                           --\n")
dump_queue()
svwrite("//    Translated by Joe Meng        07-07-2013                           --\n")
dump_queue()
svwrite("//    Modified by Zuofu Cheng       08-19-2023                           --\n")
dump_queue()
svwrite("//    Modified by Satvik Yellanki   12-17-2023                           --\n")
dump_queue()
svwrite("//    Fall 2024 Distribution                                             --\n")
dump_queue()
svwrite("//                                                                       --\n")
dump_queue()
svwrite("//    For use with ECE 385 USB + HDMI Lab                                --\n")
dump_queue()
svwrite("//    UIUC ECE Department                                                --\n")
dump_queue()
svwrite("//-------------------------------------------------------------------------\n")
dump_queue()
svwrite("\n")
dump_queue()
from svmath import *
svwrite("module  square \n")
dump_queue()
svwrite("( \n")
dump_queue()
svwrite("    input  logic        Reset, \n")
dump_queue()
svwrite("    input  logic        frame_clk,\n")
dump_queue()
svwrite("    input  logic [7:0]  keycode,\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    output logic [9:0]  X, \n")
dump_queue()
svwrite("    output logic [9:0]  Y, \n")
dump_queue()
svwrite("    output logic [9:0]  S \n")
dump_queue()
svwrite(");\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    parameter [9:0] Ball_X_Center=320;  // Center position on the X axis\n")
dump_queue()
svwrite("    parameter [9:0] Ball_Y_Center=240;  // Center position on the Y axis\n")
dump_queue()
svwrite("    parameter [9:0] Ball_X_Min=0;       // Leftmost point on the X axis\n")
dump_queue()
svwrite("    parameter [9:0] Ball_X_Max=639;     // Rightmost point on the X axis\n")
dump_queue()
svwrite("    parameter [9:0] Ball_Y_Min=0;       // Topmost point on the Y axis\n")
dump_queue()
svwrite("    parameter [9:0] Ball_Y_Max=479;     // Bottommost point on the Y axis\n")
dump_queue()
svwrite("    parameter [9:0] Ball_X_Step=1;      // Step size on the X axis\n")
dump_queue()
svwrite("    parameter [9:0] Ball_Y_Step=1;      // Step size on the Y axis\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    logic [9:0] Ball_X_Motion;\n")
dump_queue()
svwrite("    logic [9:0] Ball_X_Motion_next;\n")
dump_queue()
svwrite("    logic [9:0] Ball_Y_Motion;\n")
dump_queue()
svwrite("    logic [9:0] Ball_Y_Motion_next;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    logic [9:0] Ball_X_next;\n")
dump_queue()
svwrite("    logic [9:0] Ball_Y_next;\n")
dump_queue()
svwrite("\n")
dump_queue()
begin_comb()
svwrite("        Ball_Y_Motion_next = Ball_Y_Motion + 10'b1; // set default motion to be same as prev clock cycle \n")
dump_queue()
svwrite("        Ball_X_Motion_next = Ball_X_Motion;\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("        //modify to control ball motion with the keycode\n")
dump_queue()
svwrite("        // W\n")
dump_queue()
svwrite("        if (keycode == 8'h1A)\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            Ball_Y_Motion_next = -10'd1;\n")
dump_queue()
svwrite("            Ball_X_Motion_next = 10'd0;\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("        \n")
dump_queue()
svwrite("        // A\n")
dump_queue()
svwrite("        if (keycode == 8'h4)\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            Ball_Y_Motion_next = 10'd0;\n")
dump_queue()
svwrite("            Ball_X_Motion_next = -10'd1;\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("        \n")
dump_queue()
svwrite("        // S\n")
dump_queue()
svwrite("        if (keycode == 8'h16)\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            Ball_Y_Motion_next = 10'd1;\n")
dump_queue()
svwrite("            Ball_X_Motion_next = 10'd0;\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("        \n")
dump_queue()
svwrite("        //D\n")
dump_queue()
svwrite("        if (keycode == 8'h7)\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            Ball_Y_Motion_next = 10'd0;\n")
dump_queue()
svwrite("            Ball_X_Motion_next = 10'd1;\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("        if ( (Y + S) >= Ball_Y_Max )  // Ball is at the bottom edge, BOUNCE!\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            Ball_Y_Motion_next = (~ (Ball_Y_Motion) + 1'b1);  // set to -1 via 2's complement.\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("        else if ( (Y - S) <= Ball_Y_Min )  // Ball is at the top edge, BOUNCE!\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            //Ball_Y_Motion_next = Ball_Y_Step;\n")
dump_queue()
svwrite("            Ball_Y_Motion_next = (~ (Ball_Y_Motion) + 1'b1);\n")
dump_queue()
svwrite("        end  \n")
dump_queue()
svwrite("       //fill in the rest of the motion equations here to bounce left and right\n")
dump_queue()
svwrite("       // yes ma'am\n")
dump_queue()
svwrite("        if ( (X + S) >= Ball_X_Max )  // Ball is at the right edge, BOUNCE!\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            Ball_X_Motion_next = (~ (Ball_X_Step) + 1'b1);  // set to -1 via 2's complement.\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("        else if ( (X - S) <= Ball_X_Min )  // Ball is at the left edge, BOUNCE!\n")
dump_queue()
svwrite("        begin\n")
dump_queue()
svwrite("            Ball_X_Motion_next = Ball_X_Step;\n")
dump_queue()
svwrite("        end  \n")
dump_queue()
svwrite("\n")
dump_queue()
end_comb()
svwrite("\n")
dump_queue()
svwrite("    assign S = 16;  // default ball size\n")
dump_queue()
svwrite("    assign Ball_X_next = (X + Ball_X_Motion_next);\n")
dump_queue()
svwrite("    assign Ball_Y_next = (Y + Ball_Y_Motion_next);\n")
dump_queue()
svwrite("   \n")
dump_queue()
svwrite("    always_ff @(posedge frame_clk) //make sure the frame clock is instantiated correctly\n")
dump_queue()
svwrite("    begin: Move_Ball\n")
dump_queue()
svwrite("        if (Reset)\n")
dump_queue()
svwrite("        begin \n")
dump_queue()
svwrite("            Ball_Y_Motion <= 10'd0; //Ball_Y_Step;\n")
dump_queue()
svwrite("			Ball_X_Motion <= 10'd1; //Ball_X_Step;\n")
dump_queue()
svwrite("            \n")
dump_queue()
svwrite("			Y <= Ball_Y_Center;\n")
dump_queue()
svwrite("			X <= Ball_X_Center;\n")
dump_queue()
svwrite("        end\n")
dump_queue()
svwrite("        else \n")
dump_queue()
svwrite("        begin \n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("			Ball_Y_Motion <= Ball_Y_Motion_next; \n")
dump_queue()
svwrite("			Ball_X_Motion <= Ball_X_Motion_next; \n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("            Y <= Ball_Y_next;  // Update ball position\n")
dump_queue()
svwrite("            X <= Ball_X_next;\n")
dump_queue()
svwrite("			\n")
dump_queue()
svwrite("		end  \n")
dump_queue()
svwrite("    end\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("\n")
dump_queue()
svwrite("    \n")
dump_queue()
svwrite("      \n")
dump_queue()
svwrite("endmodule\n")
dump_queue()
svpy.writefile.close()